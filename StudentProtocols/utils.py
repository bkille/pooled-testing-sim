#  DO NOT EDIT THIS FILE

import math
from scipy import stats
import warnings
import errno
import os
import signal
import functools

warnings.filterwarnings("ignore", message="Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.")


class TimeoutError(Exception):
    pass

def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
    def decorator(func):
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)

        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.alarm(seconds)
            try:
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return wrapper

    return decorator


class ValidationError(Exception):
    def __init__(self, pred, truth):
        message = f"Incorrect set of positive samples identified...\nProtocol: {sorted(pred)}\nTruth:    {sorted(truth)}"
        super().__init__(message)


class TestSample:
    def __init__(self, sample):
        self.__sample = sample
        self.__num_queries = 0
        self.__validated = False
    
    def query(self, query_set):
        self.__num_queries += 1
        res = any(self.__sample[i] for i in query_set)
        return res
    
    def get_num_queries(self):
        return self.__num_queries
    
        
class ProtocolTester:
    def __init__(self, population_size, prevalence, protocol_class):
        self.n = population_size
        self.p = prevalence
        self.binom_rv = stats.bernoulli(prevalence)
        self.proto = protocol_class(population_size, prevalence)

    # @timeout(seconds=10)
    def run_protocol(self, num_trials=1, verbose=True):
        tests_used = []
        for trial_idx in range(num_trials):
            sample_arr = self.binom_rv.rvs(self.n)
            true_positives = set(i for i in range(self.n) if sample_arr[i])
            ts = TestSample(sample_arr)
            pred_positives = self.proto.isolate_positives(ts)
            if true_positives != pred_positives:
                raise ValidationError(pred_positives, true_positives)
            tests_used.append(ts.get_num_queries())

        if verbose:
            print(f"Protocol stats for n={self.n} and p={self.p}")
            if num_trials > 1:
                print(stats.describe(tests_used))
            else:
                print(tests_used[0], "tests used!")
        return tests_used
    