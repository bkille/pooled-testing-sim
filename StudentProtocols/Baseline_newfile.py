# DO NOT EDIT THIS FILE
# Copy this file and implement your own Protocol.isolate_positives method
#
# Create a new branch w/ your team name as the branch name
# git checkout -b your_team_name
#
# Add the file to the git repo
# git add your_file
#
# Commit it
# git commit your_file -m "A nice message"
#
# Push to your branch
# git push origin your_team_name
#
# Create a Pull Request whenever you're ready to test your method against others

from .utils import TestSample

class Protocol:
    def __init__(self, population_size: int, prevalence: float):
        self.n = population_size
        self.p = prevalence
    
    def isolate_positives(self, sample: TestSample) -> set:
        # Implement your strategy here.
        # 
        # 
        # Your goal is to return the indices of the positive samples
        # while minimizing the number of calls to sample.query
        #
        # Not correctly identifying the set of positive samples results in disqualification!
        #
        # The input will be a TestSample object, which allows you to query
        # a subset of 0 ... n-1
        #
        # sample.query([1, 3, 4]) will return True if any of 1, 3, or 4 are positive
        idx = list(range(0, len(sample._TestSample__sample)))
        return set(self.isolate_positives_helper(list(sample._TestSample__sample), idx, sample))
    
    def isolate_positives_helper(self, sample, indices, testSample):
        #sample: list of patients
        #testSample: object

        # if len(sample) < 1:
        #     return []
        
        maybePositives = []
        for i in indices:
            maybePositives.append(sample[i])

        if testSample.query(indices):
            # split / binary search
            if len(maybePositives) == 1:
                return indices
            midpoint = len(maybePositives) // 2
            # print("mid ", midpoint)
            left = self.isolate_positives_helper(sample, indices[:midpoint], testSample)
            right = self.isolate_positives_helper(sample, indices[midpoint:], testSample)
            # print("left ", left, "right ", right)
            if not left:
                return right
            return left + right
        else:
            # print("all good ")
            return []