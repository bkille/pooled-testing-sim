# DO NOT EDIT THIS FILE
# Copy this file and implement your own Protocol.isolate_positives method
#
# Create a new branch w/ your team name as the branch name
# git checkout -b your_team_name
#
# Add the file to the git repo
# git add your_file
#
# Commit it
# git commit your_file -m "A nice message"
#
# Push to your branch
# git push origin your_team_name
#
# Create a Pull Request whenever you're ready to test your method against others

from .utils import TestSample

class Protocol:
    def __init__(self, population_size: int, prevalence: float):
        self.n = population_size
        self.p = prevalence
        
    def divide_population(self, n, k): 
        
        samples = [set() for _ in range(k)]
        for i in range(n):
                samples[i % k].add(i)
        
        return samples
    
    
    def divide_into_pairs(self, input_set): 
        
        input_list = list(input_set)
        
        pairs = []
        
        for i in range(0, len(input_list), 2): 
            pair = set(input_list[i:i+2])
            pairs.append(pair)
            
        return pairs

    def isolate_positives(self, sample: TestSample) -> set:
        # Implement your strategy here.
        # 
        # 
        # Your goal is to return the indices of the positive samples
        # while minimizing the number of calls to sample.query
        #
        # Not correctly identifying the set of positive samples results in disqualification!
        #
        # The input will be a TestSample object, which allows you to query
        # a subset of 0 ... n-1
        #
        # sample.query([1, 3, 4]) will return True if any of 1, 3, or 4 are positive
        
        sample_sets_of_8 = self.divide_population(self.n, 4)
        
        # Initialize an empty set to store positive indices
        positive_ids = set()
        
        # Iterate over each set
        for s1 in sample_sets_of_8:
            
            # If querying the set returns True, check each pairs in the set 
            if sample.query(set(s1)):
                
                # Divide sets of 8 into sets of 2
                sample_sets_of_2 = self.divide_into_pairs(s1)
                    
                for s2 in sample_sets_of_2: 
                    
                    # If a sample in this set of 2 is positive then, check each sample
                    if sample.query(set(s2)): 
                        
                        for s3 in s2: 
                            
                            # If sample is positive add to positive ids set
                            if sample.query(set([s3])): 
                                positive_ids.add(s3)
        
        return positive_ids
